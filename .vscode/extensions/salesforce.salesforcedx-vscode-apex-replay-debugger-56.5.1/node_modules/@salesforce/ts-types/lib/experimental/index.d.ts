import { AnyConstructor, Dictionary, Nullable, Optional, View } from '../types';
/**
 * @ignore
 */
export declare type PrimitiveType = 'boolean' | 'function' | 'number' | 'object' | 'string' | 'symbol' | 'undefined';
/**
 * @ignore
 */
export declare type VerifiableType = PrimitiveType | AnyConstructor;
/**
 * @ignore
 */
export declare type PropertyShape = {
    type: VerifiableType;
    optional: boolean;
};
/**
 * @ignore
 */
export declare type ObjectShape = Dictionary<VerifiableType | PropertyShape>;
/**
 * @ignore
 */
export declare function is<T extends object>(obj: Nullable<object>, shape: ObjectShape): obj is T;
/**
 * @ignore
 */
export declare function as<T extends object>(obj: Nullable<object>, shape: ObjectShape): Optional<T>;
/**
 * @ignore
 */
export declare function hasNull<T, K extends string>(value: T, key: K): value is T & View<K, string>;
